buildscript {
	repositories {
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
		maven {
			url project.properties['artifactory_contextUrl']
			credentials {
				username "aws"
				password System.env.CODEARTIFACT_AUTH_TOKEN
			}
		}
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:2.3.10.RELEASE"
		classpath "net.ltgt.gradle:gradle-apt-plugin:0.21"
		classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.15.2"
		classpath "org.owasp:dependency-check-gradle:6.1.6"
		classpath "org.sonatype.gradle.plugins:scan-gradle-plugin:1.2.4"
	}
}

plugins {
	id "io.spring.dependency-management" version "1.0.10.RELEASE"
	id "org.sonarqube" version "3.0"
	id "com.diffplug.spotless" version "5.7.0"
	id "com.github.spotbugs" version "4.5.1"
	id 'org.springframework.boot' version '2.4.2'
}

ext {
	build_target = project.hasProperty("build_target") ? project.build_target : "SNAPSHOT"
	springCloudVersion = "Hoxton.SR8"
	mapstructVersion = "1.3.1.Final"
	jodaTimeVersion = "2.10.6"
	fasterxmlJacksonVersion = "2.11.0"
	javaxValidationVersion = "2.0.1.Final"
	jsonpathVersion = "2.4.0"
	hamcrestJunitVersion = "2.0.0.0"
	lombokVersion = "1.18.12"
	sourceJdkVersion = JavaVersion.VERSION_1_8
	targetJdkVersion = JavaVersion.VERSION_11
}

apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: "com.jfrog.artifactory"
apply plugin: 'java'
apply plugin: "net.ltgt.apt"
apply plugin: 'io.spring.dependency-management'
apply plugin: "org.springframework.boot"
apply plugin: 'jacoco'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: "com.github.spotbugs"
apply plugin: "com.diffplug.spotless"
apply plugin: "org.sonatype.gradle.plugins.scan"
apply plugin: "base"

group = 'com.example'
version = "1.6.2-${build_target}"

sourceCompatibility = "${sourceJdkVersion}"
targetCompatibility = "${targetJdkVersion}"

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	maven {
		url = 'https://repo.maven.apache.org/maven2'
	}
	maven {
		url = 'https://clojars.org/repo/'
	}
}

dependencyManagement {
	imports {
		mavenBom("org.springframework.boot:spring-boot-dependencies:2.3.10.RELEASE")
		mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
	}
}

bootJar {
	mainClassName = 'com.example.restservice.RestServiceApplication'
}

dependencies {
	implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '6.4'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	implementation 'org.springframework.kafka:spring-kafka:2.5.6.RELEASE'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'
	testImplementation "org.hamcrest:hamcrest-junit:${hamcrestJunitVersion}"
	testImplementation "com.jayway.jsonpath:json-path-assert:${jsonpathVersion}"
	testImplementation "com.github.javafaker:javafaker:1.0.2"
	testImplementation 'org.junit.jupiter:junit-jupiter:5.6.2'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
	testImplementation 'org.mockito:mockito-inline:2.13.0'

	testImplementation "com.github.javafaker:javafaker:0.15"

	implementation "com.example:rest-service:1.6.1-SNAPSHOT"
}

jacocoTestReport {
	reports {
		xml.enabled true
		html.enabled true
		csv.enabled true
	}
}

//spotless {
//	java {
//		importOrder()
//		removeUnusedImports()
//		googleJavaFormat()
//	}
//}


artifactoryPublish.skip = true

artifactoryPublish {
	dependsOn jar
}



publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
	repositories {
		maven {
			url 'https://test-137546367210.d.codeartifact.us-east-1.amazonaws.com/maven/spring-services/'
			credentials {
				username "aws"
				password System.env.CODEARTIFACT_AUTH_TOKEN
			}
		}
	}
}

configurations {
	[apiElements, runtimeElements].each {
		it.outgoing.artifacts.removeIf { it.buildDependencies.getDependencies(null).contains(jar) }
		it.outgoing.artifact(bootJar)
	}
}


test {
	useJUnitPlatform()
}
